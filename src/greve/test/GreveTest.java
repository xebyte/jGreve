package greve.test;

import java.io.FileInputStream;
import java.lang.Process;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;

import greve.Printer;
import greve.struct.*;
import jregex.Matcher;
import jregex.Pattern;
import jregex.REFlags;

import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import greve.Main;
import greve.Events;
import jxl.write.WriteException;
import org.apache.poi.ss.usermodel.*;
import printer.PrinterDriver;

public class GreveTest {
	String pyOut = "";
//	String pyOut = "Read configuration file ./default.cfg\ngenes:\n{}\nfile is  variation.hg19.v10.nov.2010.txt 67419\nfile is  indel.hg19.v10.nov.2010.txt 101605\ngenelist  {}\nannot:\n{'chrY': [[0, 2500000, 'p11.32', 'gneg'], [2500000, 3000000, 'p11.31', 'gpos50'], [3000000, 11600000, 'p11.2', 'gneg'], [11600000, 12500000, 'p11.1', 'acen'], [12500000, 13400000, 'q11.1', 'acen'], [13400000, 15100000, 'q11.21', 'gneg'], [15100000, 19800000, 'q11.221', 'gpos50'], [19800000, 22100000, 'q11.222', 'gneg'], [22100000, 26200000, 'q11.223', 'gpos50'], [26200000, 28800000, 'q11.23', 'gneg'], [28800000, 59373566, 'q12', 'gvar']], 'chrX': [[0, 4300000, 'p22.33', 'gneg'], [4300000, 6000000, 'p22.32', 'gpos50'], [6000000, 9500000, 'p22.31', 'gneg'], [9500000, 17100000, 'p22.2', 'gpos50'], [17100000, 19300000, 'p22.13', 'gneg'], [19300000, 21900000, 'p22.12', 'gpos50'], [21900000, 24900000, 'p22.11', 'gneg'], [24900000, 29300000, 'p21.3', 'gpos100'], [29300000, 31500000, 'p21.2', 'gneg'], [31500000, 37600000, 'p21.1', 'gpos100'], [37600000, 42400000, 'p11.4', 'gneg'], [42400000, 46400000, 'p11.3', 'gpos75'], [46400000, 49800000, 'p11.23', 'gneg'], [49800000, 54800000, 'p11.22', 'gpos25'], [54800000, 58100000, 'p11.21', 'gneg'], [58100000, 60600000, 'p11.1', 'acen'], [60600000, 63000000, 'q11.1', 'acen'], [63000000, 64600000, 'q11.2', 'gneg'], [64600000, 67800000, 'q12', 'gpos50'], [67800000, 71800000, 'q13.1', 'gneg'], [71800000, 73900000, 'q13.2', 'gpos50'], [73900000, 76000000, 'q13.3', 'gneg'], [76000000, 84600000, 'q21.1', 'gpos100'], [84600000, 86200000, 'q21.2', 'gneg'], [86200000, 91800000, 'q21.31', 'gpos100'], [91800000, 93500000, 'q21.32', 'gneg'], [93500000, 98300000, 'q21.33', 'gpos75'], [98300000, 102600000, 'q22.1', 'gneg'], [102600000, 103700000, 'q22.2', 'gpos50'], [103700000, 108700000, 'q22.3', 'gneg'], [108700000, 116500000, 'q23', 'gpos75'], [116500000, 120900000, 'q24', 'gneg'], [120900000, 128700000, 'q25', 'gpos100'], [128700000, 130400000, 'q26.1', 'gneg'], [130400000, 133600000, 'q26.2', 'gpos25'], [133600000, 138000000, 'q26.3', 'gneg'], [138000000, 140300000, 'q27.1', 'gpos75'], [140300000, 142100000, 'q27.2', 'gneg'], [142100000, 147100000, 'q27.3', 'gpos100'], [147100000, 155270560, 'q28', 'gneg']], 'chr13': [[0, 4500000, 'p13', 'gvar'], [4500000, 10000000, 'p12', 'stalk'], [10000000, 16300000, 'p11.2', 'gvar'], [16300000, 17900000, 'p11.1', 'acen'], [17900000, 19500000, 'q11', 'acen'], [19500000, 23300000, 'q12.11', 'gneg'], [23300000, 25500000, 'q12.12', 'gpos25'], [25500000, 27800000, 'q12.13', 'gneg'], [27800000, 28900000, 'q12.2', 'gpos25'], [28900000, 32200000, 'q12.3', 'gneg'], [32200000, 34000000, 'q13.1', 'gpos50'], [34000000, 35500000, 'q13.2', 'gneg'], [35500000, 40100000, 'q13.3', 'gpos75'], [40100000, 45200000, 'q14.11', 'gneg'], [45200000, 45800000, 'q14.12', 'gpos25'], [45800000, 47300000, 'q14.13', 'gneg'], [47300000, 50900000, 'q14.2', 'gpos50'], [50900000, 55300000, 'q14.3', 'gneg'], [55300000, 59600000, 'q21.1', 'gpos100'], [59600000, 62300000, 'q21.2', 'gneg'], [62300000, 65700000, 'q21.31', 'gpos75'], [65700000, 68600000, 'q21.32', 'gneg'], [68600000, 73300000, 'q21.33', 'gpos100'], [73300000, 75400000, 'q22.1', 'gneg'], [75400000, 77200000, 'q22.2', 'gpos50'], [77200000, 79000000, 'q22.3', 'gneg'], [79000000, 87700000, 'q31.1', 'gpos100'], [87700000, 90000000, 'q31.2', 'gneg'], [90000000, 95000000, 'q31.3', 'gpos100'], [95000000, 98200000, 'q32.1', 'gneg'], [98200000, 99300000, 'q32.2', 'gpos25'], [99300000, 101700000, 'q32.3', 'gneg'], [101700000, 104800000, 'q33.1', 'gpos100'], [104800000, 107000000, 'q33.2', 'gneg'], [107000000, 110300000, 'q33.3', 'gpos100'], [110300000, 115169878, 'q34', 'gneg']], 'chr12': [[0, 3300000, 'p13.33', 'gneg'], [3300000, 5400000, 'p13.32', 'gpos25'], [5400000, 10100000, 'p13.31', 'gneg'], [10100000, 12800000, 'p13.2', 'gpos75'], [12800000, 14800000, 'p13.1', 'gneg'], [14800000, 20000000, 'p12.3', 'gpos100'], [20000000, 21300000, 'p12.2', 'gneg'], [21300000, 26500000, 'p12.1', 'gpos100'], [26500000, 27800000, 'p11.23', 'gneg'], [27800000, 30700000, 'p11.22', 'gpos50'], [30700000, 33300000, 'p11.21', 'gneg'], [33300000, 35800000, 'p11.1', 'acen'], [35800000, 38200000, 'q11', 'acen'], [38200000, 46400000, 'q12', 'gpos100'], [46400000, 49100000, 'q13.11', 'gneg'], [49100000, 51500000, 'q13.12', 'gpos25'], [51500000, 54900000, 'q13.13', 'gneg'], [54900000, 56600000, 'q13.2', 'gpos25'], [56600000, 58100000, 'q13.3', 'gneg'], [58100000, 63100000, 'q14.1', 'gpos75'], [63100000, 65100000, 'q14.2', 'gneg'], [65100000, 67700000, 'q14.3', 'gpos50'], [67700000, 71500000, 'q15', 'gneg'], [71500000, 75700000, 'q21.1', 'gpos75'], [75700000, 80300000, 'q21.2', 'gneg'], [80300000, 86700000, 'q21.31', 'gpos100'], [86700000, 89000000, 'q21.32', 'gneg'], [89000000, 92600000, 'q21.33', 'gpos100'], [92600000, 96200000, 'q22', 'gneg'], [96200000, 101600000, 'q23.1', 'gpos75'], [101600000, 103800000, 'q23.2', 'gneg'], [103800000, 109000000, 'q23.3', 'gpos50'], [109000000, 111700000, 'q24.11', 'gneg'], [111700000, 112300000, 'q24.12', 'gpos25'], [112300000, 114300000, 'q24.13', 'gneg'], [114300000, 116800000, 'q24.21', 'gpos50'], [116800000, 118100000, 'q24.22', 'gneg'], [118100000, 120700000, 'q24.23', 'gpos50'], [120700000, 125900000, 'q24.31', 'gneg'], [125900000, 129300000, 'q24.32', 'gpos50'], [129300000, 133851895, 'q24.33', 'gneg']], 'chr11': [[0, 2800000, 'p15.5', 'gneg'], [2800000, 10700000, 'p15.4', 'gpos50'], [10700000, 12700000, 'p15.3', 'gneg'], [12700000, 16200000, 'p15.2', 'gpos50'], [16200000, 21700000, 'p15.1', 'gneg'], [21700000, 26100000, 'p14.3', 'gpos100'], [26100000, 27200000, 'p14.2', 'gneg'], [27200000, 31000000, 'p14.1', 'gpos75'], [31000000, 36400000, 'p13', 'gneg'], [36400000, 43500000, 'p12', 'gpos100'], [43500000, 48800000, 'p11.2', 'gneg'], [48800000, 51600000, 'p11.12', 'gpos75'], [51600000, 53700000, 'p11.11', 'acen'], [53700000, 55700000, 'q11', 'acen'], [55700000, 59900000, 'q12.1', 'gpos75'], [59900000, 61700000, 'q12.2', 'gneg'], [61700000, 63400000, 'q12.3', 'gpos25'], [63400000, 65900000, 'q13.1', 'gneg'], [65900000, 68400000, 'q13.2', 'gpos25'], [68400000, 70400000, 'q13.3', 'gneg'], [70400000, 75200000, 'q13.4', 'gpos50'], [75200000, 77100000, 'q13.5', 'gneg'], [77100000, 85600000, 'q14.1', 'gpos100'], [85600000, 88300000, 'q14.2', 'gneg'], [88300000, 92800000, 'q14.3', 'gpos100'], [92800000, 97200000, 'q21', 'gneg'], [97200000, 102100000, 'q22.1', 'gpos100'], [102100000, 102900000, 'q22.2', 'gneg'], [102900000, 110400000, 'q22.3', 'gpos100'], [110400000, 112500000, 'q23.1', 'gneg'], [112500000, 114500000, 'q23.2', 'gpos50'], [114500000, 121200000, 'q23.3', 'gneg'], [121200000, 123900000, 'q24.1', 'gpos50'], [123900000, 127800000, 'q24.2', 'gneg'], [127800000, 130800000, 'q24.3', 'gpos50'], [130800000, 135006516, 'q25', 'gneg']], 'chr10': [[0, 3000000, 'p15.3', 'gneg'], [3000000, 3800000, 'p15.2', 'gpos25'], [3800000, 6600000, 'p15.1', 'gneg'], [6600000, 12200000, 'p14', 'gpos75'], [12200000, 17300000, 'p13', 'gneg'], [17300000, 18600000, 'p12.33', 'gpos75'], [18600000, 18700000, 'p12.32', 'gneg'], [18700000, 22600000, 'p12.31', 'gpos75'], [22600000, 24600000, 'p12.2', 'gneg'], [24600000, 29600000, 'p12.1', 'gpos50'], [29600000, 31300000, 'p11.23', 'gneg'], [31300000, 34400000, 'p11.22', 'gpos25'], [34400000, 38000000, 'p11.21', 'gneg'], [38000000, 40200000, 'p11.1', 'acen'], [40200000, 42300000, 'q11.1', 'acen'], [42300000, 46100000, 'q11.21', 'gneg'], [46100000, 49900000, 'q11.22', 'gpos25'], [49900000, 52900000, 'q11.23', 'gneg'], [52900000, 61200000, 'q21.1', 'gpos100'], [61200000, 64500000, 'q21.2', 'gneg'], [64500000, 70600000, 'q21.3', 'gpos100'], [70600000, 74900000, 'q22.1', 'gneg'], [74900000, 77700000, 'q22.2', 'gpos50'], [77700000, 82000000, 'q22.3', 'gneg'], [82000000, 87900000, 'q23.1', 'gpos100'], [87900000, 89500000, 'q23.2', 'gneg'], [89500000, 92900000, 'q23.31', 'gpos75'], [92900000, 94100000, 'q23.32', 'gneg'], [94100000, 97000000, 'q23.33', 'gpos50'], [97000000, 99300000, 'q24.1', 'gneg'], [99300000, 101900000, 'q24.2', 'gpos50'], [101900000, 103000000, 'q24.31', 'gneg'], [103000000, 104900000, 'q24.32', 'gpos25'], [104900000, 105800000, 'q24.33', 'gneg'], [105800000, 111900000, 'q25.1', 'gpos100'], [111900000, 114900000, 'q25.2', 'gneg'], [114900000, 119100000, 'q25.3', 'gpos75'], [119100000, 121700000, 'q26.11', 'gneg'], [121700000, 123100000, 'q26.12', 'gpos50'], [123100000, 127500000, 'q26.13', 'gneg'], [127500000, 130600000, 'q26.2', 'gpos50'], [130600000, 135534747, 'q26.3', 'gneg']], 'chr17': [[0, 3300000, 'p13.3', 'gneg'], [3300000, 6500000, 'p13.2', 'gpos50'], [6500000, 10700000, 'p13.1', 'gneg'], [10700000, 16000000, 'p12', 'gpos75'], [16000000, 22200000, 'p11.2', 'gneg'], [22200000, 24000000, 'p11.1', 'acen'], [24000000, 25800000, 'q11.1', 'acen'], [25800000, 31800000, 'q11.2', 'gneg'], [31800000, 38100000, 'q12', 'gpos50'], [38100000, 38400000, 'q21.1', 'gneg'], [38400000, 40900000, 'q21.2', 'gpos25'], [40900000, 44900000, 'q21.31', 'gneg'], [44900000, 47400000, 'q21.32', 'gpos25'], [47400000, 50200000, 'q21.33', 'gneg'], [50200000, 57600000, 'q22', 'gpos75'], [57600000, 58300000, 'q23.1', 'gneg'], [58300000, 61100000, 'q23.2', 'gpos75'], [61100000, 62600000, 'q23.3', 'gneg'], [62600000, 64200000, 'q24.1', 'gpos50'], [64200000, 67100000, 'q24.2', 'gneg'], [67100000, 70900000, 'q24.3', 'gpos75'], [70900000, 74800000, 'q25.1', 'gneg'], [74800000, 75300000, 'q25.2', 'gpos25'], [75300000, 81195210, 'q25.3', 'gneg']], 'chr16': [[0, 7900000, 'p13.3', 'gneg'], [7900000, 10500000, 'p13.2', 'gpos50'], [10500000, 12600000, 'p13.13', 'gneg'], [12600000, 14800000, 'p13.12', 'gpos50'], [14800000, 16800000, 'p13.11', 'gneg'], [16800000, 21200000, 'p12.3', 'gpos50'], [21200000, 24200000, 'p12.2', 'gneg'], [24200000, 28100000, 'p12.1', 'gpos50'], [28100000, 34600000, 'p11.2', 'gneg'], [34600000, 36600000, 'p11.1', 'acen'], [36600000, 38600000, 'q11.1', 'acen'], [38600000, 47000000, 'q11.2', 'gvar'], [47000000, 52600000, 'q12.1', 'gneg'], [52600000, 56700000, 'q12.2', 'gpos50'], [56700000, 57400000, 'q13', 'gneg'], [57400000, 66700000, 'q21', 'gpos100'], [66700000, 70800000, 'q22.1', 'gneg'], [70800000, 72900000, 'q22.2', 'gpos50'], [72900000, 74100000, 'q22.3', 'gneg'], [74100000, 79200000, 'q23.1', 'gpos75'], [79200000, 81700000, 'q23.2', 'gneg'], [81700000, 84200000, 'q23.3', 'gpos50'], [84200000, 87100000, 'q24.1', 'gneg'], [87100000, 88700000, 'q24.2', 'gpos25'], [88700000, 90354753, 'q24.3', 'gneg']], 'chr15': [[0, 3900000, 'p13', 'gvar'], [3900000, 8700000, 'p12', 'stalk'], [8700000, 15800000, 'p11.2', 'gvar'], [15800000, 19000000, 'p11.1', 'acen'], [19000000, 20700000, 'q11.1', 'acen'], [20700000, 25700000, 'q11.2', 'gneg'], [25700000, 28100000, 'q12', 'gpos50'], [28100000, 30300000, 'q13.1', 'gneg'], [30300000, 31200000, 'q13.2', 'gpos50'], [31200000, 33600000, 'q13.3', 'gneg'], [33600000, 40100000, 'q14', 'gpos75'], [40100000, 42800000, 'q15.1', 'gneg'], [42800000, 43600000, 'q15.2', 'gpos25'], [43600000, 44800000, 'q15.3', 'gneg'], [44800000, 49500000, 'q21.1', 'gpos75'], [49500000, 52900000, 'q21.2', 'gneg'], [52900000, 59100000, 'q21.3', 'gpos75'], [59100000, 59300000, 'q22.1', 'gneg'], [59300000, 63700000, 'q22.2', 'gpos25'], [63700000, 67200000, 'q22.31', 'gneg'], [67200000, 67300000, 'q22.32', 'gpos25'], [67300000, 67500000, 'q22.33', 'gneg'], [67500000, 72700000, 'q23', 'gpos25'], [72700000, 75200000, 'q24.1', 'gneg'], [75200000, 76600000, 'q24.2', 'gpos25'], [76600000, 78300000, 'q24.3', 'gneg'], [78300000, 81700000, 'q25.1', 'gpos50'], [81700000, 85200000, 'q25.2', 'gneg'], [85200000, 89100000, 'q25.3', 'gpos50'], [89100000, 94300000, 'q26.1', 'gneg'], [94300000, 98500000, 'q26.2', 'gpos50'], [98500000, 102531392, 'q26.3', 'gneg']], 'chr14': [[0, 3700000, 'p13', 'gvar'], [3700000, 8100000, 'p12', 'stalk'], [8100000, 16100000, 'p11.2', 'gvar'], [16100000, 17600000, 'p11.1', 'acen'], [17600000, 19100000, 'q11.1', 'acen'], [19100000, 24600000, 'q11.2', 'gneg'], [24600000, 33300000, 'q12', 'gpos100'], [33300000, 35300000, 'q13.1', 'gneg'], [35300000, 36600000, 'q13.2', 'gpos50'], [36600000, 37800000, 'q13.3', 'gneg'], [37800000, 43500000, 'q21.1', 'gpos100'], [43500000, 47200000, 'q21.2', 'gneg'], [47200000, 50900000, 'q21.3', 'gpos100'], [50900000, 54100000, 'q22.1', 'gneg'], [54100000, 55500000, 'q22.2', 'gpos25'], [55500000, 58100000, 'q22.3', 'gneg'], [58100000, 62100000, 'q23.1', 'gpos75'], [62100000, 64800000, 'q23.2', 'gneg'], [64800000, 67900000, 'q23.3', 'gpos50'], [67900000, 70200000, 'q24.1', 'gneg'], [70200000, 73800000, 'q24.2', 'gpos50'], [73800000, 79300000, 'q24.3', 'gneg'], [79300000, 83600000, 'q31.1', 'gpos100'], [83600000, 84900000, 'q31.2', 'gneg'], [84900000, 89800000, 'q31.3', 'gpos100'], [89800000, 91900000, 'q32.11', 'gneg'], [91900000, 94700000, 'q32.12', 'gpos25'], [94700000, 96300000, 'q32.13', 'gneg'], [96300000, 101400000, 'q32.2', 'gpos50'], [101400000, 103200000, 'q32.31', 'gneg'], [103200000, 104000000, 'q32.32', 'gpos50'], [104000000, 107349540, 'q32.33', 'gneg']], 'chr19': [[0, 6900000, 'p13.3', 'gneg'], [6900000, 13900000, 'p13.2', 'gpos25'], [13900000, 14000000, 'p13.13', 'gneg'], [14000000, 16300000, 'p13.12', 'gpos25'], [16300000, 20000000, 'p13.11', 'gneg'], [20000000, 24400000, 'p12', 'gvar'], [24400000, 26500000, 'p11', 'acen'], [26500000, 28600000, 'q11', 'acen'], [28600000, 32400000, 'q12', 'gvar'], [32400000, 35500000, 'q13.11', 'gneg'], [35500000, 38300000, 'q13.12', 'gpos25'], [38300000, 38700000, 'q13.13', 'gneg'], [38700000, 43400000, 'q13.2', 'gpos25'], [43400000, 45200000, 'q13.31', 'gneg'], [45200000, 48000000, 'q13.32', 'gpos25'], [48000000, 51400000, 'q13.33', 'gneg'], [51400000, 53600000, 'q13.41', 'gpos25'], [53600000, 56300000, 'q13.42', 'gneg'], [56300000, 59128983, 'q13.43', 'gpos25']], 'chr18': [[0, 2900000, 'p11.32', 'gneg'], [2900000, 7100000, 'p11.31', 'gpos50'], [7100000, 8500000, 'p11.23', 'gneg'], [8500000, 10900000, 'p11.22', 'gpos25'], [10900000, 15400000, 'p11.21', 'gneg'], [15400000, 17200000, 'p11.1', 'acen'], [17200000, 19000000, 'q11.1', 'acen'], [19000000, 25000000, 'q11.2', 'gneg'], [25000000, 32700000, 'q12.1', 'gpos100'], [32700000, 37200000, 'q12.2', 'gneg'], [37200000, 43500000, 'q12.3', 'gpos75'], [43500000, 48200000, 'q21.1', 'gneg'], [48200000, 53800000, 'q21.2', 'gpos75'], [53800000, 56200000, 'q21.31', 'gneg'], [56200000, 59000000, 'q21.32', 'gpos50'], [59000000, 61600000, 'q21.33', 'gneg'], [61600000, 66800000, 'q22.1', 'gpos100'], [66800000, 68700000, 'q22.2', 'gneg'], [68700000, 73100000, 'q22.3', 'gpos25'], [73100000, 78077248, 'q23', 'gneg']], 'chr22': [[0, 3800000, 'p13', 'gvar'], [3800000, 8300000, 'p12', 'stalk'], [8300000, 12200000, 'p11.2', 'gvar'], [12200000, 14700000, 'p11.1', 'acen'], [14700000, 17900000, 'q11.1', 'acen'], [17900000, 22200000, 'q11.21', 'gneg'], [22200000, 23500000, 'q11.22', 'gpos25'], [23500000, 25900000, 'q11.23', 'gneg'], [25900000, 29600000, 'q12.1', 'gpos50'], [29600000, 32200000, 'q12.2', 'gneg'], [32200000, 37600000, 'q12.3', 'gpos50'], [37600000, 41000000, 'q13.1', 'gneg'], [41000000, 44200000, 'q13.2', 'gpos50'], [44200000, 48400000, 'q13.31', 'gneg'], [48400000, 49400000, 'q13.32', 'gpos50'], [49400000, 51304566, 'q13.33', 'gneg']], 'chr20': [[0, 5100000, 'p13', 'gneg'], [5100000, 9200000, 'p12.3', 'gpos75'], [9200000, 12100000, 'p12.2', 'gneg'], [12100000, 17900000, 'p12.1', 'gpos75'], [17900000, 21300000, 'p11.23', 'gneg'], [21300000, 22300000, 'p11.22', 'gpos25'], [22300000, 25600000, 'p11.21', 'gneg'], [25600000, 27500000, 'p11.1', 'acen'], [27500000, 29400000, 'q11.1', 'acen'], [29400000, 32100000, 'q11.21', 'gneg'], [32100000, 34400000, 'q11.22', 'gpos25'], [34400000, 37600000, 'q11.23', 'gneg'], [37600000, 41700000, 'q12', 'gpos75'], [41700000, 42100000, 'q13.11', 'gneg'], [42100000, 46400000, 'q13.12', 'gpos25'], [46400000, 49800000, 'q13.13', 'gneg'], [49800000, 55000000, 'q13.2', 'gpos75'], [55000000, 56500000, 'q13.31', 'gneg'], [56500000, 58400000, 'q13.32', 'gpos50'], [58400000, 63025520, 'q13.33', 'gneg']], 'chr21': [[0, 2800000, 'p13', 'gvar'], [2800000, 6800000, 'p12', 'stalk'], [6800000, 10900000, 'p11.2', 'gvar'], [10900000, 13200000, 'p11.1', 'acen'], [13200000, 14300000, 'q11.1', 'acen'], [14300000, 16400000, 'q11.2', 'gneg'], [16400000, 24000000, 'q21.1', 'gpos100'], [24000000, 26800000, 'q21.2', 'gneg'], [26800000, 31500000, 'q21.3', 'gpos75'], [31500000, 35800000, 'q22.11', 'gneg'], [35800000, 37800000, 'q22.12', 'gpos50'], [37800000, 39700000, 'q22.13', 'gneg'], [39700000, 42600000, 'q22.2', 'gpos50'], [42600000, 48129895, 'q22.3', 'gneg']], 'chr7': [[0, 2800000, 'p22.3', 'gneg'], [2800000, 4500000, 'p22.2', 'gpos25'], [4500000, 7300000, 'p22.1', 'gneg'], [7300000, 13800000, 'p21.3', 'gpos100'], [13800000, 16500000, 'p21.2', 'gneg'], [16500000, 20900000, 'p21.1', 'gpos100'], [20900000, 25500000, 'p15.3', 'gneg'], [25500000, 28000000, 'p15.2', 'gpos50'], [28000000, 28800000, 'p15.1', 'gneg'], [28800000, 35000000, 'p14.3', 'gpos75'], [35000000, 37200000, 'p14.2', 'gneg'], [37200000, 43300000, 'p14.1', 'gpos75'], [43300000, 45400000, 'p13', 'gneg'], [45400000, 49000000, 'p12.3', 'gpos75'], [49000000, 50500000, 'p12.2', 'gneg'], [50500000, 54000000, 'p12.1', 'gpos75'], [54000000, 58000000, 'p11.2', 'gneg'], [58000000, 59900000, 'p11.1', 'acen'], [59900000, 61700000, 'q11.1', 'acen'], [61700000, 67000000, 'q11.21', 'gneg'], [67000000, 72200000, 'q11.22', 'gpos50'], [72200000, 77500000, 'q11.23', 'gneg'], [77500000, 86400000, 'q21.11', 'gpos100'], [86400000, 88200000, 'q21.12', 'gneg'], [88200000, 91100000, 'q21.13', 'gpos75'], [91100000, 92800000, 'q21.2', 'gneg'], [92800000, 98000000, 'q21.3', 'gpos75'], [98000000, 103800000, 'q22.1', 'gneg'], [103800000, 104500000, 'q22.2', 'gpos50'], [104500000, 107400000, 'q22.3', 'gneg'], [107400000, 114600000, 'q31.1', 'gpos75'], [114600000, 117400000, 'q31.2', 'gneg'], [117400000, 121100000, 'q31.31', 'gpos75'], [121100000, 123800000, 'q31.32', 'gneg'], [123800000, 127100000, 'q31.33', 'gpos75'], [127100000, 129200000, 'q32.1', 'gneg'], [129200000, 130400000, 'q32.2', 'gpos25'], [130400000, 132600000, 'q32.3', 'gneg'], [132600000, 138200000, 'q33', 'gpos50'], [138200000, 143100000, 'q34', 'gneg'], [143100000, 147900000, 'q35', 'gpos75'], [147900000, 152600000, 'q36.1', 'gneg'], [152600000, 155100000, 'q36.2', 'gpos25'], [155100000, 159138663, 'q36.3', 'gneg']], 'chr6': [[0, 2300000, 'p25.3', 'gneg'], [2300000, 4200000, 'p25.2', 'gpos25'], [4200000, 7100000, 'p25.1', 'gneg'], [7100000, 10600000, 'p24.3', 'gpos50'], [10600000, 11600000, 'p24.2', 'gneg'], [11600000, 13400000, 'p24.1', 'gpos25'], [13400000, 15200000, 'p23', 'gneg'], [15200000, 25200000, 'p22.3', 'gpos75'], [25200000, 27000000, 'p22.2', 'gneg'], [27000000, 30400000, 'p22.1', 'gpos50'], [30400000, 32100000, 'p21.33', 'gneg'], [32100000, 33500000, 'p21.32', 'gpos25'], [33500000, 36600000, 'p21.31', 'gneg'], [36600000, 40500000, 'p21.2', 'gpos25'], [40500000, 46200000, 'p21.1', 'gneg'], [46200000, 51800000, 'p12.3', 'gpos100'], [51800000, 52900000, 'p12.2', 'gneg'], [52900000, 57000000, 'p12.1', 'gpos100'], [57000000, 58700000, 'p11.2', 'gneg'], [58700000, 61000000, 'p11.1', 'acen'], [61000000, 63300000, 'q11.1', 'acen'], [63300000, 63400000, 'q11.2', 'gneg'], [63400000, 70000000, 'q12', 'gpos100'], [70000000, 75900000, 'q13', 'gneg'], [75900000, 83900000, 'q14.1', 'gpos50'], [83900000, 84900000, 'q14.2', 'gneg'], [84900000, 88000000, 'q14.3', 'gpos50'], [88000000, 93100000, 'q15', 'gneg'], [93100000, 99500000, 'q16.1', 'gpos100'], [99500000, 100600000, 'q16.2', 'gneg'], [100600000, 105500000, 'q16.3', 'gpos100'], [105500000, 114600000, 'q21', 'gneg'], [114600000, 118300000, 'q22.1', 'gpos75'], [118300000, 118500000, 'q22.2', 'gneg'], [118500000, 126100000, 'q22.31', 'gpos100'], [126100000, 127100000, 'q22.32', 'gneg'], [127100000, 130300000, 'q22.33', 'gpos75'], [130300000, 131200000, 'q23.1', 'gneg'], [131200000, 135200000, 'q23.2', 'gpos50'], [135200000, 139000000, 'q23.3', 'gneg'], [139000000, 142800000, 'q24.1', 'gpos75'], [142800000, 145600000, 'q24.2', 'gneg'], [145600000, 149000000, 'q24.3', 'gpos75'], [149000000, 152500000, 'q25.1', 'gneg'], [152500000, 155500000, 'q25.2', 'gpos50'], [155500000, 161000000, 'q25.3', 'gneg'], [161000000, 164500000, 'q26', 'gpos50'], [164500000, 171115067, 'q27', 'gneg']], 'chr5': [[0, 4500000, 'p15.33', 'gneg'], [4500000, 6300000, 'p15.32', 'gpos25'], [6300000, 9800000, 'p15.31', 'gneg'], [9800000, 15000000, 'p15.2', 'gpos50'], [15000000, 18400000, 'p15.1', 'gneg'], [18400000, 23300000, 'p14.3', 'gpos100'], [23300000, 24600000, 'p14.2', 'gneg'], [24600000, 28900000, 'p14.1', 'gpos100'], [28900000, 33800000, 'p13.3', 'gneg'], [33800000, 38400000, 'p13.2', 'gpos25'], [38400000, 42500000, 'p13.1', 'gneg'], [42500000, 46100000, 'p12', 'gpos50'], [46100000, 48400000, 'p11', 'acen'], [48400000, 50700000, 'q11.1', 'acen'], [50700000, 58900000, 'q11.2', 'gneg'], [58900000, 62900000, 'q12.1', 'gpos75'], [62900000, 63200000, 'q12.2', 'gneg'], [63200000, 66700000, 'q12.3', 'gpos75'], [66700000, 68400000, 'q13.1', 'gneg'], [68400000, 73300000, 'q13.2', 'gpos50'], [73300000, 76900000, 'q13.3', 'gneg'], [76900000, 81400000, 'q14.1', 'gpos50'], [81400000, 82800000, 'q14.2', 'gneg'], [82800000, 92300000, 'q14.3', 'gpos100'], [92300000, 98200000, 'q15', 'gneg'], [98200000, 102800000, 'q21.1', 'gpos100'], [102800000, 104500000, 'q21.2', 'gneg'], [104500000, 109600000, 'q21.3', 'gpos100'], [109600000, 111500000, 'q22.1', 'gneg'], [111500000, 113100000, 'q22.2', 'gpos50'], [113100000, 115200000, 'q22.3', 'gneg'], [115200000, 121400000, 'q23.1', 'gpos100'], [121400000, 127300000, 'q23.2', 'gneg'], [127300000, 130600000, 'q23.3', 'gpos100'], [130600000, 136200000, 'q31.1', 'gneg'], [136200000, 139500000, 'q31.2', 'gpos25'], [139500000, 144500000, 'q31.3', 'gneg'], [144500000, 149800000, 'q32', 'gpos75'], [149800000, 152700000, 'q33.1', 'gneg'], [152700000, 155700000, 'q33.2', 'gpos50'], [155700000, 159900000, 'q33.3', 'gneg'], [159900000, 168500000, 'q34', 'gpos100'], [168500000, 172800000, 'q35.1', 'gneg'], [172800000, 176600000, 'q35.2', 'gpos25'], [176600000, 180915260, 'q35.3', 'gneg']], 'chr4': [[0, 4500000, 'p16.3', 'gneg'], [4500000, 6000000, 'p16.2', 'gpos25'], [6000000, 11300000, 'p16.1', 'gneg'], [11300000, 15200000, 'p15.33', 'gpos50'], [15200000, 17800000, 'p15.32', 'gneg'], [17800000, 21300000, 'p15.31', 'gpos75'], [21300000, 27700000, 'p15.2', 'gneg'], [27700000, 35800000, 'p15.1', 'gpos100'], [35800000, 41200000, 'p14', 'gneg'], [41200000, 44600000, 'p13', 'gpos50'], [44600000, 48200000, 'p12', 'gneg'], [48200000, 50400000, 'p11', 'acen'], [50400000, 52700000, 'q11', 'acen'], [52700000, 59500000, 'q12', 'gneg'], [59500000, 66600000, 'q13.1', 'gpos100'], [66600000, 70500000, 'q13.2', 'gneg'], [70500000, 76300000, 'q13.3', 'gpos75'], [76300000, 78900000, 'q21.1', 'gneg'], [78900000, 82400000, 'q21.21', 'gpos50'], [82400000, 84100000, 'q21.22', 'gneg'], [84100000, 86900000, 'q21.23', 'gpos25'], [86900000, 88000000, 'q21.3', 'gneg'], [88000000, 93700000, 'q22.1', 'gpos75'], [93700000, 95100000, 'q22.2', 'gneg'], [95100000, 98800000, 'q22.3', 'gpos75'], [98800000, 101100000, 'q23', 'gneg'], [101100000, 107700000, 'q24', 'gpos50'], [107700000, 114100000, 'q25', 'gneg'], [114100000, 120800000, 'q26', 'gpos75'], [120800000, 123800000, 'q27', 'gneg'], [123800000, 128800000, 'q28.1', 'gpos50'], [128800000, 131100000, 'q28.2', 'gneg'], [131100000, 139500000, 'q28.3', 'gpos100'], [139500000, 141500000, 'q31.1', 'gneg'], [141500000, 146800000, 'q31.21', 'gpos25'], [146800000, 148500000, 'q31.22', 'gneg'], [148500000, 151100000, 'q31.23', 'gpos25'], [151100000, 155600000, 'q31.3', 'gneg'], [155600000, 161800000, 'q32.1', 'gpos100'], [161800000, 164500000, 'q32.2', 'gneg'], [164500000, 170100000, 'q32.3', 'gpos100'], [170100000, 171900000, 'q33', 'gneg'], [171900000, 176300000, 'q34.1', 'gpos75'], [176300000, 177500000, 'q34.2', 'gneg'], [177500000, 183200000, 'q34.3', 'gpos100'], [183200000, 187100000, 'q35.1', 'gneg'], [187100000, 191154276, 'q35.2', 'gpos25']], 'chr3': [[0, 2800000, 'p26.3', 'gpos50'], [2800000, 4000000, 'p26.2', 'gneg'], [4000000, 8700000, 'p26.1', 'gpos50'], [8700000, 11800000, 'p25.3', 'gneg'], [11800000, 13300000, 'p25.2', 'gpos25'], [13300000, 16400000, 'p25.1', 'gneg'], [16400000, 23900000, 'p24.3', 'gpos100'], [23900000, 26400000, 'p24.2', 'gneg'], [26400000, 30900000, 'p24.1', 'gpos75'], [30900000, 32100000, 'p23', 'gneg'], [32100000, 36500000, 'p22.3', 'gpos50'], [36500000, 39400000, 'p22.2', 'gneg'], [39400000, 43700000, 'p22.1', 'gpos75'], [43700000, 44100000, 'p21.33', 'gneg'], [44100000, 44200000, 'p21.32', 'gpos50'], [44200000, 50600000, 'p21.31', 'gneg'], [50600000, 52300000, 'p21.2', 'gpos25'], [52300000, 54400000, 'p21.1', 'gneg'], [54400000, 58600000, 'p14.3', 'gpos50'], [58600000, 63700000, 'p14.2', 'gneg'], [63700000, 69800000, 'p14.1', 'gpos50'], [69800000, 74200000, 'p13', 'gneg'], [74200000, 79800000, 'p12.3', 'gpos75'], [79800000, 83500000, 'p12.2', 'gneg'], [83500000, 87200000, 'p12.1', 'gpos75'], [87200000, 87900000, 'p11.2', 'gneg'], [87900000, 91000000, 'p11.1', 'acen'], [91000000, 93900000, 'q11.1', 'acen'], [93900000, 98300000, 'q11.2', 'gvar'], [98300000, 100000000, 'q12.1', 'gneg'], [100000000, 100900000, 'q12.2', 'gpos25'], [100900000, 102800000, 'q12.3', 'gneg'], [102800000, 106200000, 'q13.11', 'gpos75'], [106200000, 107900000, 'q13.12', 'gneg'], [107900000, 111300000, 'q13.13', 'gpos50'], [111300000, 113500000, 'q13.2', 'gneg'], [113500000, 117300000, 'q13.31', 'gpos75'], [117300000, 119000000, 'q13.32', 'gneg'], [119000000, 121900000, 'q13.33', 'gpos75'], [121900000, 123800000, 'q21.1', 'gneg'], [123800000, 125800000, 'q21.2', 'gpos25'], [125800000, 129200000, 'q21.3', 'gneg'], [129200000, 133700000, 'q22.1', 'gpos25'], [133700000, 135700000, 'q22.2', 'gneg'], [135700000, 138700000, 'q22.3', 'gpos25'], [138700000, 142800000, 'q23', 'gneg'], [142800000, 148900000, 'q24', 'gpos100'], [148900000, 152100000, 'q25.1', 'gneg'], [152100000, 155000000, 'q25.2', 'gpos50'], [155000000, 157000000, 'q25.31', 'gneg'], [157000000, 159000000, 'q25.32', 'gpos50'], [159000000, 160700000, 'q25.33', 'gneg'], [160700000, 167600000, 'q26.1', 'gpos100'], [167600000, 170900000, 'q26.2', 'gneg'], [170900000, 175700000, 'q26.31', 'gpos75'], [175700000, 179000000, 'q26.32', 'gneg'], [179000000, 182700000, 'q26.33', 'gpos75'], [182700000, 184500000, 'q27.1', 'gneg'], [184500000, 186000000, 'q27.2', 'gpos25'], [186000000, 187900000, 'q27.3', 'gneg'], [187900000, 192300000, 'q28', 'gpos75'], [192300000, 198022430, 'q29', 'gneg']], 'chr2': [[0, 4400000, 'p25.3', 'gneg'], [4400000, 7100000, 'p25.2', 'gpos50'], [7100000, 12200000, 'p25.1', 'gneg'], [12200000, 16700000, 'p24.3', 'gpos75'], [16700000, 19200000, 'p24.2', 'gneg'], [19200000, 24000000, 'p24.1', 'gpos75'], [24000000, 27900000, 'p23.3', 'gneg'], [27900000, 30000000, 'p23.2', 'gpos25'], [30000000, 32100000, 'p23.1', 'gneg'], [32100000, 36600000, 'p22.3', 'gpos75'], [36600000, 38600000, 'p22.2', 'gneg'], [38600000, 41800000, 'p22.1', 'gpos50'], [41800000, 47800000, 'p21', 'gneg'], [47800000, 52900000, 'p16.3', 'gpos100'], [52900000, 55000000, 'p16.2', 'gneg'], [55000000, 61300000, 'p16.1', 'gpos100'], [61300000, 64100000, 'p15', 'gneg'], [64100000, 68600000, 'p14', 'gpos50'], [68600000, 71500000, 'p13.3', 'gneg'], [71500000, 73500000, 'p13.2', 'gpos50'], [73500000, 75000000, 'p13.1', 'gneg'], [75000000, 83300000, 'p12', 'gpos100'], [83300000, 90500000, 'p11.2', 'gneg'], [90500000, 93300000, 'p11.1', 'acen'], [93300000, 96800000, 'q11.1', 'acen'], [96800000, 102700000, 'q11.2', 'gneg'], [102700000, 106000000, 'q12.1', 'gpos50'], [106000000, 107500000, 'q12.2', 'gneg'], [107500000, 110200000, 'q12.3', 'gpos25'], [110200000, 114400000, 'q13', 'gneg'], [114400000, 118800000, 'q14.1', 'gpos50'], [118800000, 122400000, 'q14.2', 'gneg'], [122400000, 129900000, 'q14.3', 'gpos50'], [129900000, 132500000, 'q21.1', 'gneg'], [132500000, 135100000, 'q21.2', 'gpos25'], [135100000, 136800000, 'q21.3', 'gneg'], [136800000, 142200000, 'q22.1', 'gpos100'], [142200000, 144100000, 'q22.2', 'gneg'], [144100000, 148700000, 'q22.3', 'gpos100'], [148700000, 149900000, 'q23.1', 'gneg'], [149900000, 150500000, 'q23.2', 'gpos25'], [150500000, 154900000, 'q23.3', 'gneg'], [154900000, 159800000, 'q24.1', 'gpos75'], [159800000, 163700000, 'q24.2', 'gneg'], [163700000, 169700000, 'q24.3', 'gpos75'], [169700000, 178000000, 'q31.1', 'gneg'], [178000000, 180600000, 'q31.2', 'gpos50'], [180600000, 183000000, 'q31.3', 'gneg'], [183000000, 189400000, 'q32.1', 'gpos75'], [189400000, 191900000, 'q32.2', 'gneg'], [191900000, 197400000, 'q32.3', 'gpos75'], [197400000, 203300000, 'q33.1', 'gneg'], [203300000, 204900000, 'q33.2', 'gpos50'], [204900000, 209000000, 'q33.3', 'gneg'], [209000000, 215300000, 'q34', 'gpos100'], [215300000, 221500000, 'q35', 'gneg'], [221500000, 225200000, 'q36.1', 'gpos75'], [225200000, 226100000, 'q36.2', 'gneg'], [226100000, 231000000, 'q36.3', 'gpos100'], [231000000, 235600000, 'q37.1', 'gneg'], [235600000, 237300000, 'q37.2', 'gpos50'], [237300000, 243199373, 'q37.3', 'gneg']], 'chr1': [[0, 2300000, 'p36.33', 'gneg'], [2300000, 5400000, 'p36.32', 'gpos25'], [5400000, 7200000, 'p36.31', 'gneg'], [7200000, 9200000, 'p36.23', 'gpos25'], [9200000, 12700000, 'p36.22', 'gneg'], [12700000, 16200000, 'p36.21', 'gpos50'], [16200000, 20400000, 'p36.13', 'gneg'], [20400000, 23900000, 'p36.12', 'gpos25'], [23900000, 28000000, 'p36.11', 'gneg'], [28000000, 30200000, 'p35.3', 'gpos25'], [30200000, 32400000, 'p35.2', 'gneg'], [32400000, 34600000, 'p35.1', 'gpos25'], [34600000, 40100000, 'p34.3', 'gneg'], [40100000, 44100000, 'p34.2', 'gpos25'], [44100000, 46800000, 'p34.1', 'gneg'], [46800000, 50700000, 'p33', 'gpos75'], [50700000, 56100000, 'p32.3', 'gneg'], [56100000, 59000000, 'p32.2', 'gpos50'], [59000000, 61300000, 'p32.1', 'gneg'], [61300000, 68900000, 'p31.3', 'gpos50'], [68900000, 69700000, 'p31.2', 'gneg'], [69700000, 84900000, 'p31.1', 'gpos100'], [84900000, 88400000, 'p22.3', 'gneg'], [88400000, 92000000, 'p22.2', 'gpos75'], [92000000, 94700000, 'p22.1', 'gneg'], [94700000, 99700000, 'p21.3', 'gpos75'], [99700000, 102200000, 'p21.2', 'gneg'], [102200000, 107200000, 'p21.1', 'gpos100'], [107200000, 111800000, 'p13.3', 'gneg'], [111800000, 116100000, 'p13.2', 'gpos50'], [116100000, 117800000, 'p13.1', 'gneg'], [117800000, 120600000, 'p12', 'gpos50'], [120600000, 121500000, 'p11.2', 'gneg'], [121500000, 125000000, 'p11.1', 'acen'], [125000000, 128900000, 'q11', 'acen'], [128900000, 142600000, 'q12', 'gvar'], [142600000, 147000000, 'q21.1', 'gneg'], [147000000, 150300000, 'q21.2', 'gpos50'], [150300000, 155000000, 'q21.3', 'gneg'], [155000000, 156500000, 'q22', 'gpos50'], [156500000, 159100000, 'q23.1', 'gneg'], [159100000, 160500000, 'q23.2', 'gpos50'], [160500000, 165500000, 'q23.3', 'gneg'], [165500000, 167200000, 'q24.1', 'gpos50'], [167200000, 170900000, 'q24.2', 'gneg'], [170900000, 172900000, 'q24.3', 'gpos75'], [172900000, 176000000, 'q25.1', 'gneg'], [176000000, 180300000, 'q25.2', 'gpos50'], [180300000, 185800000, 'q25.3', 'gneg'], [185800000, 190800000, 'q31.1', 'gpos100'], [190800000, 193800000, 'q31.2', 'gneg'], [193800000, 198700000, 'q31.3', 'gpos100'], [198700000, 207200000, 'q32.1', 'gneg'], [207200000, 211500000, 'q32.2', 'gpos25'], [211500000, 214500000, 'q32.3', 'gneg'], [214500000, 224100000, 'q41', 'gpos100'], [224100000, 224600000, 'q42.11', 'gneg'], [224600000, 227000000, 'q42.12', 'gpos25'], [227000000, 230700000, 'q42.13', 'gneg'], [230700000, 234700000, 'q42.2', 'gpos50'], [234700000, 236600000, 'q42.3', 'gneg'], [236600000, 243700000, 'q43', 'gpos75'], [243700000, 249250621, 'q44', 'gneg']], 'chr9': [[0, 2200000, 'p24.3', 'gneg'], [2200000, 4600000, 'p24.2', 'gpos25'], [4600000, 9000000, 'p24.1', 'gneg'], [9000000, 14200000, 'p23', 'gpos75'], [14200000, 16600000, 'p22.3', 'gneg'], [16600000, 18500000, 'p22.2', 'gpos25'], [18500000, 19900000, 'p22.1', 'gneg'], [19900000, 25600000, 'p21.3', 'gpos100'], [25600000, 28000000, 'p21.2', 'gneg'], [28000000, 33200000, 'p21.1', 'gpos100'], [33200000, 36300000, 'p13.3', 'gneg'], [36300000, 38400000, 'p13.2', 'gpos25'], [38400000, 41000000, 'p13.1', 'gneg'], [41000000, 43600000, 'p12', 'gpos50'], [43600000, 47300000, 'p11.2', 'gneg'], [47300000, 49000000, 'p11.1', 'acen'], [49000000, 50700000, 'q11', 'acen'], [50700000, 65900000, 'q12', 'gvar'], [65900000, 68700000, 'q13', 'gneg'], [68700000, 72200000, 'q21.11', 'gpos25'], [72200000, 74000000, 'q21.12', 'gneg'], [74000000, 79200000, 'q21.13', 'gpos50'], [79200000, 81100000, 'q21.2', 'gneg'], [81100000, 84100000, 'q21.31', 'gpos50'], [84100000, 86900000, 'q21.32', 'gneg'], [86900000, 90400000, 'q21.33', 'gpos50'], [90400000, 91800000, 'q22.1', 'gneg'], [91800000, 93900000, 'q22.2', 'gpos25'], [93900000, 96600000, 'q22.31', 'gneg'], [96600000, 99300000, 'q22.32', 'gpos25'], [99300000, 102600000, 'q22.33', 'gneg'], [102600000, 108200000, 'q31.1', 'gpos100'], [108200000, 111300000, 'q31.2', 'gneg'], [111300000, 114900000, 'q31.3', 'gpos25'], [114900000, 117700000, 'q32', 'gneg'], [117700000, 122500000, 'q33.1', 'gpos75'], [122500000, 125800000, 'q33.2', 'gneg'], [125800000, 130300000, 'q33.3', 'gpos25'], [130300000, 133500000, 'q34.11', 'gneg'], [133500000, 134000000, 'q34.12', 'gpos25'], [134000000, 135900000, 'q34.13', 'gneg'], [135900000, 137400000, 'q34.2', 'gpos25'], [137400000, 141213431, 'q34.3', 'gneg']], 'chr8': [[0, 2200000, 'p23.3', 'gneg'], [2200000, 6200000, 'p23.2', 'gpos75'], [6200000, 12700000, 'p23.1', 'gneg'], [12700000, 19000000, 'p22', 'gpos100'], [19000000, 23300000, 'p21.3', 'gneg'], [23300000, 27400000, 'p21.2', 'gpos50'], [27400000, 28800000, 'p21.1', 'gneg'], [28800000, 36500000, 'p12', 'gpos75'], [36500000, 38300000, 'p11.23', 'gneg'], [38300000, 39700000, 'p11.22', 'gpos25'], [39700000, 43100000, 'p11.21', 'gneg'], [43100000, 45600000, 'p11.1', 'acen'], [45600000, 48100000, 'q11.1', 'acen'], [48100000, 52200000, 'q11.21', 'gneg'], [52200000, 52600000, 'q11.22', 'gpos75'], [52600000, 55500000, 'q11.23', 'gneg'], [55500000, 61600000, 'q12.1', 'gpos50'], [61600000, 62200000, 'q12.2', 'gneg'], [62200000, 66000000, 'q12.3', 'gpos50'], [66000000, 68000000, 'q13.1', 'gneg'], [68000000, 70500000, 'q13.2', 'gpos50'], [70500000, 73900000, 'q13.3', 'gneg'], [73900000, 78300000, 'q21.11', 'gpos100'], [78300000, 80100000, 'q21.12', 'gneg'], [80100000, 84600000, 'q21.13', 'gpos75'], [84600000, 86900000, 'q21.2', 'gneg'], [86900000, 93300000, 'q21.3', 'gpos100'], [93300000, 99000000, 'q22.1', 'gneg'], [99000000, 101600000, 'q22.2', 'gpos25'], [101600000, 106200000, 'q22.3', 'gneg'], [106200000, 110500000, 'q23.1', 'gpos75'], [110500000, 112100000, 'q23.2', 'gneg'], [112100000, 117700000, 'q23.3', 'gpos100'], [117700000, 119200000, 'q24.11', 'gneg'], [119200000, 122500000, 'q24.12', 'gpos50'], [122500000, 127300000, 'q24.13', 'gneg'], [127300000, 131500000, 'q24.21', 'gpos50'], [131500000, 136400000, 'q24.22', 'gneg'], [136400000, 139900000, 'q24.23', 'gpos75'], [139900000, 146364022, 'q24.3', 'gneg']]}\ncyto:\n{}\nCreate new Event with count  0  for  Gain (0.0, 0.0, 1.0)\nCreate new Event with count  1  for  Loss (1.0, 0.0, 0.0)\nCreate new Event with count  2  for  CN_LOH (0.0, 1.0, 0.0)\n [] 0\npatients:\n['Sample1', 'Sample2', 'Sample3', 'Sample4', 'Sample5']\nPath to output:  ./demo_mini.chr1.xls\nkk [0.0076118514657004255, 1.8111143087806703e-05, 1.746922417833474e-08, 5.971889649458717e-12, 2.220446049250313e-16, 2.220446049250313e-16]\nin GV_plot_aberration 249250621 {'chrY': 59373566, 'chrX': 155270560, 'chr13': 115169878, 'chr12': 133851895, 'chr11': 135006516, 'chr10': 135534747, 'chr17': 81195210, 'chr16': 90354753, 'chr15': 102531392, 'chr14': 107349540, 'chr19': 59128983, 'chr18': 78077248, 'chr22': 51304566, 'chr20': 63025520, 'chr21': 48129895, 'chr7': 159138663, 'chr6': 171115067, 'chr5': 180915260, 'chr4': 191154276, 'chr3': 198022430, 'chr2': 243199373, 'chr1': 249250621, 'chr9': 141213431, 'chr8': 146364022}\n['ID', 'chr1', 'Gain', 1, 9845557, 1] 6\n['ID', 'chr1', 'Gain', 9845558, 10027722, 0] 6\n['ID', 'chr1', 'Gain', 10027723, 10607200, 2] 6\n['ID', 'chr1', 'Gain', 10607201, 10702167, 3] 6\n['ID', 'chr1', 'Gain', 10702168, 11228740, 4] 6\n['ID', 'chr1', 'Gain', 11228741, 11631364, 2] 6\n['ID', 'chr1', 'Gain', 11631365, 249250621, 0] 6\nkk [0.10681210422895637, 0.003117965230464148, 6.405608917958716e-06, 3.3517846276254204e-09, 2.220446049250313e-16, 2.220446049250313e-16]\nin GV_plot_aberration 249250621 {'chrY': 59373566, 'chrX': 155270560, 'chr13': 115169878, 'chr12': 133851895, 'chr11': 135006516, 'chr10': 135534747, 'chr17': 81195210, 'chr16': 90354753, 'chr15': 102531392, 'chr14': 107349540, 'chr19': 59128983, 'chr18': 78077248, 'chr22': 51304566, 'chr20': 63025520, 'chr21': 48129895, 'chr7': 159138663, 'chr6': 171115067, 'chr5': 180915260, 'chr4': 191154276, 'chr3': 198022430, 'chr2': 243199373, 'chr1': 249250621, 'chr9': 141213431, 'chr8': 146364022}\n['ID', 'chr1', 'Loss', 1, 10702167, 0] 6\n['ID', 'chr1', 'Loss', 10702168, 11631364, 1] 6\n['ID', 'chr1', 'Loss', 11631365, 249250621, 0] 6\nkk [0.004462434249873248, 5.004703493960427e-06, 1.6612101694235548e-09, 2.220446049250313e-16, 2.220446049250313e-16, 2.220446049250313e-16]\n/usr/bin/convert -colorspace RGB -density 144 -verbose ./demo_mini.chr1.eps ./demo_mini.chr1.jpg\n\nPath to output:  ./demo_mini.chr2.xls\nkk [0.0076118514657004255, 1.8111143087806703e-05, 1.746922417833474e-08, 5.971889649458717e-12, 2.220446049250313e-16, 2.220446049250313e-16]\nin GV_plot_aberration 243199373 {'chrY': 59373566, 'chrX': 155270560, 'chr13': 115169878, 'chr12': 133851895, 'chr11': 135006516, 'chr10': 135534747, 'chr17': 81195210, 'chr16': 90354753, 'chr15': 102531392, 'chr14': 107349540, 'chr19': 59128983, 'chr18': 78077248, 'chr22': 51304566, 'chr20': 63025520, 'chr21': 48129895, 'chr7': 159138663, 'chr6': 171115067, 'chr5': 180915260, 'chr4': 191154276, 'chr3': 198022430, 'chr2': 243199373, 'chr1': 249250621, 'chr9': 141213431, 'chr8': 146364022}\n['ID', 'chr2', 'Gain', 1, 686457, 0] 6\n['ID', 'chr2', 'Gain', 686458, 2801677, 3] 6\n['ID', 'chr2', 'Gain', 2801678, 12079926, 0] 6\n['ID', 'chr2', 'Gain', 12079927, 15153278, 1] 6\n['ID', 'chr2', 'Gain', 15153279, 243199373, 0] 6\nkk [0.10681210422895637, 0.003117965230464148, 6.405608917958716e-06, 3.3517846276254204e-09, 2.220446049250313e-16, 2.220446049250313e-16]\nin GV_plot_aberration 243199373 {'chrY': 59373566, 'chrX': 155270560, 'chr13': 115169878, 'chr12': 133851895, 'chr11': 135006516, 'chr10': 135534747, 'chr17': 81195210, 'chr16': 90354753, 'chr15': 102531392, 'chr14': 107349540, 'chr19': 59128983, 'chr18': 78077248, 'chr22': 51304566, 'chr20': 63025520, 'chr21': 48129895, 'chr7': 159138663, 'chr6': 171115067, 'chr5': 180915260, 'chr4': 191154276, 'chr3': 198022430, 'chr2': 243199373, 'chr1': 249250621, 'chr9': 141213431, 'chr8': 146364022}\n['ID', 'chr2', 'Loss', 1, 17252917, 1] 6\n['ID', 'chr2', 'Loss', 17252918, 172529147, 2] 6\n['ID', 'chr2', 'Loss', 172529148, 175427473, 4] 6\n['ID', 'chr2', 'Loss', 175427474, 243199373, 0] 6\nkk [0.004462434249873248, 5.004703493960427e-06, 1.6612101694235548e-09, 2.220446049250313e-16, 2.220446049250313e-16, 2.220446049250313e-16]\nin GV_plot_aberration 243199373 {'chrY': 59373566, 'chrX': 155270560, 'chr13': 115169878, 'chr12': 133851895, 'chr11': 135006516, 'chr10': 135534747, 'chr17': 81195210, 'chr16': 90354753, 'chr15': 102531392, 'chr14': 107349540, 'chr19': 59128983, 'chr18': 78077248, 'chr22': 51304566, 'chr20': 63025520, 'chr21': 48129895, 'chr7': 159138663, 'chr6': 171115067, 'chr5': 180915260, 'chr4': 191154276, 'chr3': 198022430, 'chr2': 243199373, 'chr1': 249250621, 'chr9': 141213431, 'chr8': 146364022}\n['ID', 'chr2', 'CN_LOH', 1, 3629349, 0] 6\n['ID', 'chr2', 'CN_LOH', 3629350, 6075619, 1] 6\n['ID', 'chr2', 'CN_LOH', 6075620, 70031684, 0] 6\n['ID', 'chr2', 'CN_LOH', 70031685, 77031684, 1] 6\n['ID', 'chr2', 'CN_LOH', 77031685, 79223428, 2] 6\n['ID', 'chr2', 'CN_LOH', 79223429, 243199373, 0] 6\n/usr/bin/convert -colorspace RGB -density 144 -verbose ./demo_mini.chr2.eps ./demo_mini.chr2.jpg\n\n{'chrY': 59373566, 'chrX': 155270560, 'chr13': 115169878, 'chr12': 133851895, 'chr11': 135006516, 'chr10': 135534747, 'chr17': 81195210, 'chr16': 90354753, 'chr15': 102531392, 'chr14': 107349540, 'chr19': 59128983, 'chr18': 78077248, 'chr22': 51304566, 'chr20': 63025520, 'chr21': 48129895, 'chr7': 159138663, 'chr6': 171115067, 'chr5': 180915260, 'chr4': 191154276, 'chr3': 198022430, 'chr2': 243199373, 'chr1': 249250621, 'chr9': 141213431, 'chr8': 146364022} ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY']\nin mht for event loop 0 30 900\nin mht for event loop 1 200 900\nin mht for event loop 2 370 900\nmaxi37 in plot_summary is {'chrY': 59373566, 'chrX': 155270560, 'chr13': 115169878, 'chr12': 133851895, 'chr11': 135006516, 'chr10': 135534747, 'chr17': 81195210, 'chr16': 90354753, 'chr15': 102531392, 'chr14': 107349540, 'chr19': 59128983, 'chr18': 78077248, 'chr22': 51304566, 'chr20': 63025520, 'chr21': 48129895, 'chr7': 159138663, 'chr6': 171115067, 'chr5': 180915260, 'chr4': 191154276, 'chr3': 198022430, 'chr2': 243199373, 'chr1': 249250621, 'chr9': 141213431, 'chr8': 146364022}\n!!! EVENTS !!!\n[ {'chrY': [['ID', 'chrY', 'Gain', 1, 59373566, 0]], 'chrX': [['ID', 'chrX', 'Gain', 1, 155270560, 0]], 'chr13': [['ID', 'chr13', 'Gain', 1, 115169878, 0]], 'chr12': [['ID', 'chr12', 'Gain', 1, 133851895, 0]], 'chr11': [['ID', 'chr11', 'Gain', 1, 135006516, 0]], 'chr10': [['ID', 'chr10', 'Gain', 1, 135534747, 0]], 'chr17': [['ID', 'chr17', 'Gain', 1, 81195210, 0]], 'chr16': [['ID', 'chr16', 'Gain', 1, 90354753, 0]], 'chr15': [['ID', 'chr15', 'Gain', 1, 102531392, 0]], 'chr14': [['ID', 'chr14', 'Gain', 1, 107349540, 0]], 'chr19': [['ID', 'chr19', 'Gain', 1, 59128983, 0]], 'chr18': [['ID', 'chr18', 'Gain', 1, 78077248, 0]], 'chr22': [['ID', 'chr22', 'Gain', 1, 51304566, 0]], 'chr20': [['ID', 'chr20', 'Gain', 1, 63025520, 0]], 'chr21': [['ID', 'chr21', 'Gain', 1, 48129895, 0]], 'chr7': [['ID', 'chr7', 'Gain', 1, 159138663, 0]], 'chr6': [['ID', 'chr6', 'Gain', 1, 171115067, 0]], 'chr5': [['ID', 'chr5', 'Gain', 1, 180915260, 0]], 'chr4': [['ID', 'chr4', 'Gain', 1, 191154276, 0]], 'chr3': [['ID', 'chr3', 'Gain', 1, 198022430, 0]], 'chr2': [['ID', 'chr2', 'Gain', 1, 686457, 0, 0.0, 0.0076118514657004255, 0.038176419006852425], ['ID', 'chr2', 'Gain', 686458, 2801677, 3, 0.6, 5.971889649458717e-12, 8.314351207516779e-09], ['ID', 'chr2', 'Gain', 2801678, 12079926, 0, 0.0, 0.0076118514657004255, 0.038176419006852425], ['ID', 'chr2', 'Gain', 12079927, 15153278, 1, 0.2, 1.8111143087806703e-05, 0.0005496453752479313], ['ID', 'chr2', 'Gain', 15153279, 243199373, 0, 0.0, 0.0076118514657004255, 0.038176419006852425]], 'chr1': [['ID', 'chr1', 'Gain', 1, 9845557, 1], ['ID', 'chr1', 'Gain', 9845558, 10027722, 0], ['ID', 'chr1', 'Gain', 10027723, 10607200, 2], ['ID', 'chr1', 'Gain', 10607201, 10702167, 3], ['ID', 'chr1', 'Gain', 10702168, 11228740, 4], ['ID', 'chr1', 'Gain', 11228741, 11631364, 2], ['ID', 'chr1', 'Gain', 11631365, 249250621, 0]], 'chr9': [['ID', 'chr9', 'Gain', 1, 141213431, 0]], 'chr8': [['ID', 'chr8', 'Gain', 1, 146364022, 0]]} ]\n[ {'chrY': [['ID', 'chrY', 'Loss', 1, 59373566, 0]], 'chrX': [['ID', 'chrX', 'Loss', 1, 155270560, 0]], 'chr13': [['ID', 'chr13', 'Loss', 1, 115169878, 0]], 'chr12': [['ID', 'chr12', 'Loss', 1, 133851895, 0]], 'chr11': [['ID', 'chr11', 'Loss', 1, 135006516, 0]], 'chr10': [['ID', 'chr10', 'Loss', 1, 135534747, 0]], 'chr17': [['ID', 'chr17', 'Loss', 1, 81195210, 0]], 'chr16': [['ID', 'chr16', 'Loss', 1, 90354753, 0]], 'chr15': [['ID', 'chr15', 'Loss', 1, 102531392, 0]], 'chr14': [['ID', 'chr14', 'Loss', 1, 107349540, 0]], 'chr19': [['ID', 'chr19', 'Loss', 1, 59128983, 0]], 'chr18': [['ID', 'chr18', 'Loss', 1, 78077248, 0]], 'chr22': [['ID', 'chr22', 'Loss', 1, 51304566, 0]], 'chr20': [['ID', 'chr20', 'Loss', 1, 63025520, 0]], 'chr21': [['ID', 'chr21', 'Loss', 1, 48129895, 0]], 'chr7': [['ID', 'chr7', 'Loss', 1, 159138663, 0]], 'chr6': [['ID', 'chr6', 'Loss', 1, 171115067, 0]], 'chr5': [['ID', 'chr5', 'Loss', 1, 180915260, 0]], 'chr4': [['ID', 'chr4', 'Loss', 1, 191154276, 0]], 'chr3': [['ID', 'chr3', 'Loss', 1, 198022430, 0]], 'chr2': [['ID', 'chr2', 'Loss', 1, 17252917, 1, 0.2, 0.003117965230464148, 0.47943042390031154], ['ID', 'chr2', 'Loss', 17252918, 172529147, 2, 0.4, 6.405608917958716e-06, 0.011177041780425778], ['ID', 'chr2', 'Loss', 172529148, 175427473, 4, 0.8, 2.220446049250313e-16, 2.220446049250313e-16], ['ID', 'chr2', 'Loss', 175427474, 243199373, 0, 0.0, 0.10681210422895637, 0.9048832714535014]], 'chr1': [['ID', 'chr1', 'Loss', 1, 10702167, 0], ['ID', 'chr1', 'Loss', 10702168, 11631364, 1], ['ID', 'chr1', 'Loss', 11631365, 249250621, 0]], 'chr9': [['ID', 'chr9', 'Loss', 1, 141213431, 0]], 'chr8': [['ID', 'chr8', 'Loss', 1, 146364022, 0]]} ]\n[ {'chrY': [['ID', 'chrY', 'CN_LOH', 1, 59373566, 0]], 'chrX': [['ID', 'chrX', 'CN_LOH', 1, 155270560, 0]], 'chr13': [['ID', 'chr13', 'CN_LOH', 1, 115169878, 0]], 'chr12': [['ID', 'chr12', 'CN_LOH', 1, 133851895, 0]], 'chr11': [['ID', 'chr11', 'CN_LOH', 1, 135006516, 0]], 'chr10': [['ID', 'chr10', 'CN_LOH', 1, 135534747, 0]], 'chr17': [['ID', 'chr17', 'CN_LOH', 1, 81195210, 0]], 'chr16': [['ID', 'chr16', 'CN_LOH', 1, 90354753, 0]], 'chr15': [['ID', 'chr15', 'CN_LOH', 1, 102531392, 0]], 'chr14': [['ID', 'chr14', 'CN_LOH', 1, 107349540, 0]], 'chr19': [['ID', 'chr19', 'CN_LOH', 1, 59128983, 0]], 'chr18': [['ID', 'chr18', 'CN_LOH', 1, 78077248, 0]], 'chr22': [['ID', 'chr22', 'CN_LOH', 1, 51304566, 0]], 'chr20': [['ID', 'chr20', 'CN_LOH', 1, 63025520, 0]], 'chr21': [['ID', 'chr21', 'CN_LOH', 1, 48129895, 0]], 'chr7': [['ID', 'chr7', 'CN_LOH', 1, 159138663, 0]], 'chr6': [['ID', 'chr6', 'CN_LOH', 1, 171115067, 0]], 'chr5': [['ID', 'chr5', 'CN_LOH', 1, 180915260, 0]], 'chr4': [['ID', 'chr4', 'CN_LOH', 1, 191154276, 0]], 'chr3': [['ID', 'chr3', 'CN_LOH', 1, 198022430, 0]], 'chr2': [['ID', 'chr2', 'CN_LOH', 1, 3629349, 0, 0.0, 0.004462434249873248, 0.056057907915585514], ['ID', 'chr2', 'CN_LOH', 3629350, 6075619, 1, 0.2, 5.004703493960427e-06, 0.00080458147220408], ['ID', 'chr2', 'CN_LOH', 6075620, 70031684, 0, 0.0, 0.004462434249873248, 0.056057907915585514], ['ID', 'chr2', 'CN_LOH', 70031685, 77031684, 1, 0.2, 5.004703493960427e-06, 0.00080458147220408], ['ID', 'chr2', 'CN_LOH', 77031685, 79223428, 2, 0.4, 1.6612101694235548e-09, 3.4261341222974195e-06], ['ID', 'chr2', 'CN_LOH', 79223429, 243199373, 0, 0.0, 0.004462434249873248, 0.056057907915585514]], 'chr1': [['ID', 'chr1', 'CN_LOH', 1, 249250621, 0]], 'chr9': [['ID', 'chr9', 'CN_LOH', 1, 141213431, 0]], 'chr8': [['ID', 'chr8', 'CN_LOH', 1, 146364022, 0]]} ]\n--- EVENTS ---";
	String javaOut = "";

	private static final String ANSI_RESET = "\u001B[0m";
	private static final String ANSI_RED = "\u001B[31m";
	private static final String ANSI_GREEN = "\u001B[32m";

	private Main main;

    private int overlap;
    private boolean score;
    private boolean gwp;
    private boolean cp;
    private String[] chromosomes;
    private String geneList;
    private String dataset;
    private boolean indiv;

	public GreveTest(int overlap, boolean score, boolean gwp, boolean cp, String[] chromosomes, String geneList, String dataset, boolean indiv) {
        this.overlap = overlap;
        this.score = score;
        this.gwp = gwp;
        this.cp = cp;
        this.chromosomes = chromosomes;
        this.geneList = geneList;
        this.dataset = dataset;
        this.indiv = indiv;

        long pyStart = 0, pyEnd = 0;
        try {
            String s = null;

            String pyCommand = "cd /Users/xebyte/Documents/FYP/FILES/ && ./GREVE.py -n -w --jpg --loh";
            pyCommand += " -s " + overlap;
            if(score) pyCommand += " --Score";
            if(gwp) pyCommand += " --GW_P";
            if(cp) pyCommand += " --C_P";
            if(indiv) pyCommand += " --ind";
            for(String chr : chromosomes) {
                pyCommand += " -c " + chr;
            }
            if(geneList != null) pyCommand += " -g " + geneList;
            pyCommand += " " + dataset;

            String[] PY_COMMAND = new String[]{ "/bin/sh", "-c", pyCommand };

            System.out.println("Running" + pyCommand);

            pyStart = System.nanoTime();
            Process p = Runtime.getRuntime().exec(PY_COMMAND);
             
            BufferedReader stdInput = new BufferedReader(new
                  InputStreamReader(p.getInputStream()));
 
            BufferedReader stdError = new BufferedReader(new
                  InputStreamReader(p.getErrorStream()));
 
            // read the output from the command
            
            while ((s = stdInput.readLine()) != null) {
            	// System.out.println(s);
                 pyOut += s + '\n';
//                System.out.println(s);
            }
            pyEnd = System.nanoTime();

            System.out.println("Stdout captured.");

            // System.out.print("-----");
//            System.out.print(pyOut);
            System.out.print("-------\n\n\n");
             
//            read any errors from the attempted command
//            System.out.println("Here is the standard error of the command (if any):\n");
//            while ((s = stdError.readLine()) != null) {
//                 System.out.println(s);
//            }
        }
        catch (IOException e) {
            System.out.println("exception happened - here's what I know: ");
            e.printStackTrace();
            System.exit(-1);
        }

        Main.OUTPUT_PATH = "/Users/xebyte/projects/fyp/jGreve/tests/";
        // start the execution
        long startTime = System.nanoTime();
        main = new Main(dataset);

        if(true) {
            try {
                main.readGenes(geneList);
            } catch(Exception e) {
                System.err.println(e.getMessage());
            }
        }
        
        try {
        	main.readDGVData(37);
        } catch(Exception e) {
        	System.err.println("Couldn't load DGV data for build " + 37+ ": ");
        	System.err.println(e.getMessage());
        	return;
        }

        // read the annotation file
        try {
        	main.readAnnot(Common.CHROMOSOME_LIST, 37);
        } catch(Exception e) {
        	System.err.println("Couldn't load annotations for build " + 37 + ": ");
        	System.err.println(e.getMessage());
        	return;
        }

        // make cytobands
        main.makeCyto(Common.CHROMOSOME_LIST);

        // read patient abberations
        try {
        	main.readAbberations(dataset);
        } catch(Exception e) {
        	System.err.println(e.getMessage());
        	return;
        }

        final String[] chrs = chromosomes;
        final boolean tindiv = indiv;

        ExecutorService executor = Executors.newFixedThreadPool(16);
        for(int i = 0; i < chromosomes.length; i++) {
            final Integer index = new Integer(i);
            Runnable worker = new Runnable() {
                @Override
                public void run() {
                    try {
                        main.calculateIndividual(chrs[index], 37, 2, tindiv);
                    } catch (Exception e) {
                        System.err.println("There was an error during calculations");
                        System.err.println(e.getMessage());
                        return;
                    }
                }
            };
            executor.execute(worker);
        }

        executor.shutdown();
        while (!executor.isTerminated()) {}

        try {
            main.printSummary(null, 0);
        } catch (WriteException e) {
            e.printStackTrace();
        }

        main.close();
        long endTime = System.nanoTime();

        double pySeconds = (((double) (pyEnd - pyStart)) / 1000000.) / 1000.;
        double javaSeconds = (((double) (endTime - startTime)) / 1000000.) / 1000.;

        System.out.println("Python tool took " + pySeconds + " while Java tool took " + javaSeconds + ", " + ((javaSeconds/pySeconds) * 100.) + "% faster.");
	}

	private static void _testFail(String test, String message) {
		System.out.println(ANSI_RED + "Test " + test + " failed. Reason: " + message + ANSI_RESET);
	}

	private static void _testSuccess(String test) {
		System.out.println(ANSI_GREEN + "Test " + test + " succeeded." + ANSI_RESET);
	}

	public void testAnnot() throws Exception {
		System.out.println("Testing annotations.");
		// Create a Pattern object
		Pattern r = new Pattern("annot:\n\\{(.*)\\}");

		Matcher m = r.matcher(pyOut);

		if (m.find()) {

			HashMap<String, ArrayList<Cytoband>> annot = new HashMap<String, ArrayList<Cytoband>>();
			for(int i = 0; i < Common.CHROMOSOME_LIST.length; i++) {
				annot.put(Common.CHROMOSOME_LIST[i], new ArrayList<Cytoband>());
			}

			String annots = m.group(1);

	        String patternString = "'([a-zA-Z0-9]+)': \\[((\\[(([0-9]+), ([0-9]+), '([a-zA-Z0-9\\.]+)', '([a-zA-Z0-9\\.]+)')\\],? ?)+)\\],? ?";

	        r = new Pattern(patternString);
	        m = r.matcher(annots);

	        while(m.find()) {
	            // System.out.print(m.group(1) + ": " );
	            Pattern sr = new Pattern("\\[([0-9]+), ([0-9]+), '([a-zA-Z0-9\\.]+)', '([a-zA-Z0-9\\.]+)'\\],? ?");
	        	Matcher sm = sr.matcher(m.group(2));

	        	while(sm.find()) {
	        		// System.out.print("[ " + sm.group(1) + " | " + sm.group(2) + " | " + sm.group(3) + " | " + sm.group(4) + " ]");
	        		// System.out.print(", ");

	        		Cytoband cyto = new Cytoband(m.group(1), Integer.parseInt(sm.group(1)), Integer.parseInt(sm.group(2)), sm.group(3), sm.group(4));

		    		annot.get(m.group(1)).add(cyto);
	        	}

	        	// System.out.println("\n");
	        }

            System.out.println("Found " + annot.size() + " annots.");
	    	HashMap<String, ArrayList<Cytoband>> orgAnnot = main.getAnnot();

	    	if(annot.size() != orgAnnot.size()) {
	    		throw new Exception("Annotation set is different from the original program");
	    	} else {
                System.out.println("Annot sets of equal size.");
            }

			for (String key : annot.keySet()) {
			    ArrayList<Cytoband> set1 = annot.get(key);
			    ArrayList<Cytoband> set2 = orgAnnot.get(key);

			    if(set1.size() != set2.size()) throw new Exception("Annot " + key + " differs");

			    for (Cytoband t: set1) {
			        if (!set2.contains(t)) {
			            throw new Exception("Cytobands in " + key + " differ");
			        }
			    }
			}

            System.out.println("Every element of annot set the same.");

		} else {
			throw new Exception("Couldn't find annotations");
		}
	}

	public void testEvents() throws Exception {
		Pattern eventsPattern = new Pattern("!!! EVENTS !!!.(.*).--- EVENTS ---", REFlags.DOTALL); // /gs flags
		// Pattern indivEventsPattern = new Pattern("(\[ {.*} \])+"); // /g flag
		Pattern eventChromPattern = new Pattern("\\[ \\{(.*)\\} \\]"); // /g flag
		Pattern chromOverlapsPattern = new Pattern("'([a-zA-Z0-9]+)': \\[((\\['([a-zA-Z0-9]+)', '([a-zA-Z0-9]+)', '([a-zA-Z0-9\\_]+)', ([0-9\\.a-zA-Z\\-]+), ([0-9\\.a-zA-Z\\-]+), ([0-9\\.a-zA-Z\\-]+)(, ([0-9\\.a-zA-Z\\-]+))?(, ([0-9\\.a-zA-Z\\-]+))?(, ([0-9\\.a-zA-Z\\-]+))?\\],? ?)+)\\],? ?"); // /g flag
		Pattern singleOverlapPattern = new Pattern("\\['([a-zA-Z0-9]+)', '([a-zA-Z0-9]+)', '([a-zA-Z0-9\\_]+)', ([0-9\\.a-zA-Z\\-]+), ([0-9\\.a-zA-Z\\-]+), ([0-9\\.a-zA-Z\\-]+)(, ([0-9\\.a-zA-Z\\-]+))?(, ([0-9\\.a-zA-Z\\-]+))?(, ([0-9\\.a-zA-Z\\-]+))?\\]");

		Matcher m = eventsPattern.matcher(pyOut);

		if(m.find()) {
			String events = m.group(1);

			Matcher eventChromMatcher = eventChromPattern.matcher(events);

			ArrayList<Event> eventList = new ArrayList<Event>();

			while(eventChromMatcher.find()) {

				Matcher chromOverlapsMatcher = chromOverlapsPattern.matcher(eventChromMatcher.group(1));
				Event event = new Event(null);
				HashMap<String, ArrayList<Overlap>> overlaps = new HashMap<String, ArrayList<Overlap>>();

				while(chromOverlapsMatcher.find()) {
					String chr = chromOverlapsMatcher.group(1);
					String chrOverlaps = chromOverlapsMatcher.group(2);

					if(overlaps.get(chr) == null) overlaps.put(chr, new ArrayList<Overlap>());

					// System.out.print(chr + " {\n\t");

					Matcher singleOverlapMatcher = singleOverlapPattern.matcher(chrOverlaps);
					while(singleOverlapMatcher.find()) {
						String id = singleOverlapMatcher.group(1);
						String chrom = singleOverlapMatcher.group(2);
						String label = singleOverlapMatcher.group(3);
						int start = Integer.parseInt(singleOverlapMatcher.group(4));
						int end = Integer.parseInt(singleOverlapMatcher.group(5));
						int count = Integer.parseInt(singleOverlapMatcher.group(6));

						float score = 0, poiBin = 0, poiBinC = 0;
						try {
							score = Float.parseFloat(singleOverlapMatcher.group(8));
							poiBin = Float.parseFloat(singleOverlapMatcher.group(10));
							poiBinC = Float.parseFloat(singleOverlapMatcher.group(12));
						} catch(Exception e) {
							// System.out.println("It's cool.");
						}

						// System.out.println("Overlap [ " + id + ", " + chrom + ", " + label + ", " + start + ", " + end + ", " + count);
						// if(score != null) {
						// 	System.out.print(", " + score + ", " + poiBin + ", " + poiBinC);
						// }
						// System.out.print(" ]\n\t");

						Overlap overlap = new Overlap(id, chrom, label, start, end, count);
						// if(score != 0) {
						// 	overlap.setScore(score);
						// 	overlap.setPoiBin(poiBin);
						// 	overlap.setPoiBinC(poiBinC);
						// }

						overlaps.get(chr).add(overlap);
						event.setType(label);
					}

					event.setOverlaps(overlaps);
					
					// System.out.print("\n}");
				}

				eventList.add(event);
			}

            System.out.println("Found " + eventList.size() + " events.");

			ArrayList<Event> orgEventList = main.getEvents().getEvents();
			// System.out.println(orgEventList.size() + " == " + eventList.size());
			if(orgEventList.size() != eventList.size()) {
				throw new Exception("Event list size differ.");
			}

			for(int i = 0; i < eventList.size(); i++) {
				boolean found = false;

				for(int k = 0; k < eventList.size(); k++) {
					// System.out.println(eventList.get(i).getType() + " == " + orgEventList.get(k).getType());
					if(eventList.get(i).equals(orgEventList.get(k))) {
						found = true;

						HashMap<String, ArrayList<Overlap>> orgOverlaps = orgEventList.get(k).getOverlaps();
						HashMap<String, ArrayList<Overlap>> overlaps = eventList.get(i).getOverlaps();

                        System.out.println("Event " + eventList.get(k).getType() + " has " + overlaps.size() + " overlaps");

						// System.out.println(orgOverlaps.size() + " == " + overlaps.size());

						if(!orgOverlaps.equals(overlaps)) {
							for (Map.Entry<String, ArrayList<Overlap>> entry : overlaps.entrySet()) {
							    String key = entry.getKey();
							    ArrayList<Overlap> value = entry.getValue();
							    
							    ArrayList<Overlap> orgValue = orgOverlaps.get(key);

							    // System.out.println(value.size() + " == " + orgValue.size());
							    if(value.size() != orgValue.size()) {
							    	System.out.println("The overlap for event type " + eventList.get(i).getType() + " differs for chromosome " + key);
							    	System.out.println(value);
							    	System.out.println(orgValue);
							    }

							    if(!value.equals(orgValue)) {
							    	System.out.println("The overlap for event type " + eventList.get(i).getType() + " differs for chromosome " + key);
							    	System.out.println(value + "\n");
							    	System.out.println(orgValue);
							    }
							}
							throw new Exception("Overlaps are not the same");
						}

						continue;
					}
				}

				if(!found) throw new Exception("Events are not the same.");
			}

            System.out.println("Every overlap of every event the same.");
			return;
		}

		throw new Exception("Couldn't find any event overlaps.");
	}

    private void testGenes() throws Exception {
        Pattern dgvPattern = new Pattern("!!! GENES !!!.(.*).--- GENES ---", REFlags.DOTALL); // /gs flags

        Pattern chromDGVPattern = new Pattern("'([a-zA-Z0-9]+)': \\[((\\[('([0-9a-zA-Z]+)', '([a-zA-Z\\_0-9]+)', ([0-9]+), ([0-9]+))\\],? ?)+)\\],? ?"); // /g flag
        Pattern singleDGVPattern = new Pattern("\\[('([0-9a-zA-Z]+)', '([a-zA-Z\\_0-9]+)', ([0-9]+), ([0-9]+))\\]");

        Matcher m = dgvPattern.matcher(pyOut);

        if(m.find()) {
            String dgvs = m.group(1);

            Matcher eventChromMatcher = chromDGVPattern.matcher(dgvs);

            ChromosomeMap dgvdata = new ChromosomeMap();

            while(eventChromMatcher.find()) {
                Matcher singleDGVMatcher = singleDGVPattern.matcher(eventChromMatcher.group(2));
                while(singleDGVMatcher.find()) {
                    String chr = singleDGVMatcher.group(2);
                    String name = singleDGVMatcher.group(3);
                    int start = Integer.parseInt(singleDGVMatcher.group(4));
                    int end = Integer.parseInt(singleDGVMatcher.group(5));

                    dgvdata.add(chr, new Gene(name, start, end));
                }
            }

            ChromosomeMap originalDGV = main.getGenes();

            if(originalDGV.keySet().size() != dgvdata.keySet().size()) {
                throw new Exception("Key sets of genes data don't match. " + originalDGV.keySet().size() + " vs " + dgvdata.keySet().size());
            }

            for (Map.Entry<String, ArrayList<Gene>> entry : dgvdata.entrySet()) {
                String key = entry.getKey();
                ArrayList<Gene> value = entry.getValue();

                ArrayList<Gene> value2 = originalDGV.get(key);

                if(value.size() != value2.size()) {
                    throw new Exception("Gene for chromosome " + key + " differs. " + value.size() + " vs " + value2.size());
                }

                for(int i = 0; i < value.size(); i++) {
                    Gene g = value.get(i);

                    boolean found = false;

                    for(int k = 0; k < value2.size(); k++) {
                        if(g.equals(value2.get(k))) {
                            found = true;
                            break;
                        }
                    }

                    if(!found) {
                        throw new Exception("Gene " + g.getName() + " for chromosome + " + key + " was not found in original set.");
                    }
                }
            }

        } else {
            throw new Exception("Couldn't find genes data");
        }

    }

    private void testDGV() throws Exception {
        Pattern dgvPattern = new Pattern("!!! DGVDATA !!!.(.*).--- DGVDATA ---", REFlags.DOTALL); // /gs flags

        Pattern chromDGVPattern = new Pattern("'([a-zA-Z0-9]+)': \\[((\\[('([0-9a-zA-Z]+)', '([a-zA-Z\\_0-9]+)', ([0-9]+), ([0-9]+))\\],? ?)+)\\],? ?"); // /g flag
        Pattern singleDGVPattern = new Pattern("\\[('([0-9a-zA-Z]+)', '([a-zA-Z\\_0-9]+)', ([0-9]+), ([0-9]+))\\]");

        Matcher m = dgvPattern.matcher(pyOut);

        if(m.find()) {
            String dgvs = m.group(1);

            Matcher eventChromMatcher = chromDGVPattern.matcher(dgvs);

            ChromosomeMap dgvdata = new ChromosomeMap();

            while(eventChromMatcher.find()) {
                Matcher singleDGVMatcher = singleDGVPattern.matcher(eventChromMatcher.group(2));
                while(singleDGVMatcher.find()) {
                    String chr = singleDGVMatcher.group(2);
                    String name = singleDGVMatcher.group(3);
                    int start = Integer.parseInt(singleDGVMatcher.group(4));
                    int end = Integer.parseInt(singleDGVMatcher.group(5));

                    dgvdata.add(chr, new Gene(name, start, end));
                }
            }

            ChromosomeMap originalDGV = main.getDGV();

            if(originalDGV.keySet().size() != dgvdata.keySet().size()) {
                throw new Exception("Key sets of DGV data don't match. " + originalDGV.keySet().size() + " vs " + dgvdata.keySet().size());
            }

            for (Map.Entry<String, ArrayList<Gene>> entry : dgvdata.entrySet()) {
                String key = entry.getKey();
                ArrayList<Gene> value = entry.getValue();

                ArrayList<Gene> value2 = originalDGV.get(key);

                if(value.size() != value2.size()) {
                    throw new Exception("DGV for chromosome " + key + " differs. " + value.size() + " vs " + value2.size());
                }

                for(int i = 0; i < value.size(); i++) {
                    Gene g = value.get(i);

                    boolean found = false;

                    for(int k = 0; k < value2.size(); k++) {
                        if(g.equals(value2.get(k))) {
                            found = true;
                            break;
                        }
                    }

                    if(!found) {
                        throw new Exception("DGV " + g.getName() + " for chromosome + " + key + " was not found in original set.");
                    }
                }
            }

        } else {
            throw new Exception("Couldn't find DGV data");
        }

    }

    private void testFinalResults() throws Exception {

        String[] fileSplit = dataset.split("/");

//        System.out.println("fileSplit: " + Arrays.toString(fileSplit));
        fileSplit = fileSplit[fileSplit.length-1].split("\\.");
//        System.out.println("fileSplit: " + Arrays.toString(fileSplit));
        String fileNew = main.OUTPUT_PATH + "/" + fileSplit[fileSplit.length-2] + ".xls";
        String fileOrg = "/Users/xebyte/Documents/FYP/FILES/" + fileSplit[fileSplit.length-2] + "_Full.xls";

//        System.out.println("Reading file " + fileNew);
//        System.out.println("Reading file " + fileOrg);

        PrinterDriver output1 = Printer.getReader(fileNew, Printer.TYPE_XLS);
        PrinterDriver output2 = Printer.getReader(fileOrg, Printer.TYPE_CVS);

        String[] line;
        String[] line2;

        output1.readNextLine();
        output2.readNextLine();

        int lines = 0;
        int wrong = 0;
        while (((line = output1.readNextLine()) != null) && ((line2 = output2.readNextLine()) != null)) {
//            for(int i = 0; i < line.length; i++) {

                // double errors
                // instead, round it up to whatever decimal point the original tool is
                double epsilon = 0.0000000000000004;

                int start = (int) Double.parseDouble(line[2]);
                int start2 = (int) Double.parseDouble(line2[2]);
                int end = (int) Double.parseDouble(line[3]);
                int end2 = (int) Double.parseDouble(line2[3]);

                int count = (int) Double.parseDouble(line[4]);
                int count2 = (int) Double.parseDouble(line2[4]);

                BigDecimal score2 = new BigDecimal(line2[5]);
                BigDecimal score = new BigDecimal(line[5]);
                BigDecimal score_up = score.setScale(score2.scale(), RoundingMode.CEILING);
                BigDecimal score_alt = score.setScale(score2.scale(), RoundingMode.FLOOR);

                BigDecimal gwp2 = new BigDecimal(line2[6]);
                BigDecimal gwp = new BigDecimal(line[6]);
                BigDecimal gwp_up = gwp.setScale(gwp2.scale(), RoundingMode.CEILING);
                BigDecimal gwp_alt = gwp.setScale(gwp2.scale(), RoundingMode.FLOOR);

                BigDecimal cp2 = new BigDecimal(line2[7]);
                BigDecimal cp = new BigDecimal(line[7]);
                BigDecimal cp_up = cp.setScale(cp2.scale(), RoundingMode.CEILING);
                BigDecimal cp_alt = cp.setScale(cp2.scale(), RoundingMode.FLOOR);

                if(!(start == start2 && end == end2 && count == count2)) {
                    System.out.println("Start/end differs. " + Arrays.toString(line) + " != " + Arrays.toString(line2));
                    wrong++;
                    continue;
                }
//                if (!(score2 >= (score-epsilon) && score2 <= (score+epsilon))) {
                if (!(score_up.doubleValue() == score2.doubleValue() || score_alt.doubleValue() == score2.doubleValue())) {
                    System.out.println("Score differs. " + Arrays.toString(line) + " != " + Arrays.toString(line2));
                    wrong++;
                    continue;
                }
//                if (!(gwp2 >= (gwp-epsilon) && gwp2 <= (gwp+epsilon))) {
                if (!(gwp_up.doubleValue() == gwp2.doubleValue() || gwp_alt.doubleValue() == gwp2.doubleValue() || inRange(gwp_up.doubleValue() - gwp2.doubleValue(), epsilon) || inRange(gwp_alt.doubleValue() - gwp2.doubleValue(), epsilon))) {
                    System.out.println("C_P Score differs. " + (gwp_up.doubleValue()-gwp2.doubleValue()) + " != " + Arrays.toString(line2));
                    wrong++;
                    continue;
                }

//                if(!(cp2 >= (cp-epsilon) && cp2 <= (cp+epsilon))) {
                if(!(cp_up.doubleValue() == cp2.doubleValue() || cp_alt.doubleValue() == cp2.doubleValue()|| inRange(cp_up.doubleValue() - cp2.doubleValue(), epsilon) || inRange(cp_alt.doubleValue() - cp2.doubleValue(), epsilon))) {
                    System.out.println("GW_P Score differs. " + Arrays.toString(line) + " != " + Arrays.toString(line2));
                    wrong++;
                    continue;
                }
//            }

            lines++;
        }

        System.out.println(lines-wrong + "/" + lines + " (" + ((lines-wrong)/lines) * 100 + ") correct");
    }

    private boolean inRange(double number, double epsilon) {
        return (number >= (number-epsilon) && number <= (number+epsilon));
    }

    public void testSuite() {
        try {
            testGenes();

            _testSuccess("testGenes()");
        } catch (Exception e) {
            _testFail("testGenes()", e.getMessage());
        }

        try {
            testDGV();

            _testSuccess("testDGV()");
        } catch (Exception e) {
            _testFail("testDGV()", e.getMessage());
        }

        try {
            testAnnot();

            _testSuccess("testAnnot()");
        } catch(Exception e) {
            _testFail("testAnnot()", e.getMessage());
        }

        try {
            testEvents();
            _testSuccess("testEvents()");
        } catch (Exception e) {
            e.printStackTrace();
            _testFail("testEvents()", e.getMessage());
        }

        try {
            testFinalResults();
            _testSuccess("testFinalResults()");
        } catch (Exception e) {
            e.printStackTrace();
            _testFail("testFinalResults()", e.getMessage());
        }
    }

	public static void main(String[] args) {

//		GreveTest gt = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo_mini.txt", false);
//        gt.testSuite();
//
//        GreveTest gt2 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", false);
//        gt2.testSuite();

//        GreveTest gt3 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo_mini.txt", true);
//        gt3.testSuite();

//        System.out.println(" ===== chr1 !indiv ===== ");
//        GreveTest gt = new GreveTest(2, true, true, true, new String[]{"chr1"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt.testSuite();
//
//        System.out.println(" ===== chr2 !indiv ===== ");
//        GreveTest gt2 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt2.testSuite();
//
//        System.out.println(" ===== chr3 !indiv ===== ");
//        GreveTest gt3 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt3.testSuite();
//
//        System.out.println(" ===== chr4 !indiv ===== ");
//        GreveTest gt4 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3", "chr4"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt4.testSuite();

//        System.out.println(" ===== chr5 !indiv ===== ");
//        GreveTest gt5 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3", "chr4", "chr5"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt5.testSuite();
//
//        System.out.println(" ===== chr6 !indiv ===== ");
//        GreveTest gt6 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3", "chr4", "chr5", "chr6"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt6.testSuite();
//
//        System.out.println(" ===== chr7 !indiv ===== ");
//        GreveTest gt7 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt7.testSuite();
//
//        System.out.println(" ===== chr8 !indiv ===== ");
//        GreveTest gt8 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt8.testSuite();

//        System.out.println(" ===== chr9 !indiv ===== ");
//        GreveTest gt9 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt9.testSuite();
//
//        System.out.println(" ===== chr10 !indiv ===== ");
//        GreveTest gt10 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt10.testSuite();
//
//        System.out.println(" ===== chr11 !indiv ===== ");
//        GreveTest gt11 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt11.testSuite();
//
//        System.out.println(" ===== chr12 !indiv ===== ");
//        GreveTest gt12 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt12.testSuite();

//        System.out.println(" ===== chr13 !indiv ===== ");
//        GreveTest gt13 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt13.testSuite();
//
//        System.out.println(" ===== chr14 !indiv ===== ");
//        GreveTest gt14 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt14.testSuite();
//
//        System.out.println(" ===== chr15 !indiv ===== ");
//        GreveTest gt15 = new GreveTest(2, true, true, true, new String[]{"chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15"}, null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt15.testSuite();
//
//        System.out.println(" ===== chr16 !indiv ===== ");
//        GreveTest gt16 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 16), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt16.testSuite();
//
//        System.out.println(" ===== chr17 !indiv ===== ");
//        GreveTest gt17 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 17), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt17.testSuite();
//
//        System.out.println(" ===== chr18 !indiv ===== ");
//        GreveTest gt18 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 18), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt18.testSuite();
//
//        System.out.println(" ===== chr19 !indiv ===== ");
//        GreveTest gt19 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 19), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt19.testSuite();
//
//        System.out.println(" ===== chr20 !indiv ===== ");
//        GreveTest gt20 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 20), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt20.testSuite();

//        System.out.println(" ===== chr21 !indiv ===== ");
//        GreveTest gt21 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 21), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt21.testSuite();
//
//        System.out.println(" ===== chr22 !indiv ===== ");
//        GreveTest gt22 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 22), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt22.testSuite();
//
//        System.out.println(" ===== chr23 !indiv ===== ");
//        GreveTest gt23 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 23), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt23.testSuite();
//
//        System.out.println(" ===== chr24 !indiv ===== ");
//        GreveTest gt24 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 24), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", true);
//        gt24.testSuite();

        System.out.println(" ===== chr21 !indiv ===== ");
        GreveTest gt21 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 21), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", false);
        gt21.testSuite();

        System.out.println(" ===== chr22 !indiv ===== ");
        GreveTest gt22 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 22), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", false);
        gt22.testSuite();

        System.out.println(" ===== chr23 !indiv ===== ");
        GreveTest gt23 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 23), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", false);
        gt23.testSuite();

        System.out.println(" ===== chr24 !indiv ===== ");
        GreveTest gt24 = new GreveTest(2, true, true, true, Arrays.copyOfRange(Common.CHROMOSOME_LIST, 0, 24), null, "/Users/xebyte/projects/fyp/jGreve/demo/demo.xls", false);
        gt24.testSuite();
	}
}